<idea-plugin require-restart="true">
    <id>com.github.clojure-lsp</id>
    <name>Clojure LSP</name>
    <vendor url="https://github.com/clojure-lsp/clojure-lsp-intellij">clojure-lsp</vendor>

    <depends>com.intellij.modules.platform</depends>

    <extensions defaultExtensionNs="com.intellij">
        <fileType name="clojure" language="clojure" extensions="clj;cljs;cljc;cljd;edn;bb;clj_kondo"
                  implementationClass="com.github.clojure_lsp.intellij.ClojureFileType" fieldName="INSTANCE"/>

        <!-- syntax parse -->
        <lang.parserDefinition language="clojure" implementationClass="com.github.clojure_lsp.intellij.language.parser.ClojureParserDefinition"/>
        <lang.syntaxHighlighterFactory language="clojure" implementationClass="com.github.clojure_lsp.intellij.extension.SyntaxHighlighter"/>
        <colorSettingsPage implementation="com.github.clojure_lsp.intellij.extension.ColorSettingsPage"/>

        <!-- LSP features -->
        <postStartupActivity
            implementation="com.github.clojure_lsp.intellij.extension.Startup"/>
        <statusBarWidgetFactory
            id="ClojureLSPStatusBar"
            displayName="Clojure LSP"
            order="first"
            implementation="com.github.clojure_lsp.intellij.extension.StatusBarFactory" />
        <editorFactoryDocumentListener
            implementation="com.github.clojure_lsp.intellij.listener.FileListener"/>
        <externalAnnotator language="clojure" implementationClass="com.github.clojure_lsp.intellij.extension.Annotator" />
        <documentationProvider implementationClass="com.github.clojure_lsp.intellij.extension.Documentation"
                               language="clojure" order="first"/>
        <formattingService implementation="com.github.clojure_lsp.intellij.extension.Formatting"/>
        <renameHandler implementation="com.github.clojure_lsp.intellij.extension.RenameHandler"/>
        <codeInsight.inlayProvider
            language="clojure"
            isEnabledByDefault="true"
            implementationClass="com.github.clojure_lsp.intellij.extension.CodeLensProvider"/>
        <completion.contributor language="clojure" implementationClass="com.github.clojure_lsp.intellij.extension.CompletionContributor"/>
        <notificationGroup id="Clojure LSP notifications"
                           displayType="BALLOON"/>
        <fileDocumentManagerListener implementation="com.github.clojure_lsp.intellij.extension.FileDocumentManagerListener"/>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.AddMissingImport</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.AddMissingLibspec</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.AddRequireSuggestion</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.CycleColl</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.CycleKeywordAutoResolve</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.CleanNs</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.CyclePrivacy</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.CreateTest</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.DragParamBackward</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.DragParamForward</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.DragBackward</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.DragForward</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.DemoteFn</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.DestructureKeys</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.ExtractToDef</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.ExtractFunction</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.ExpandLet</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.CreateFunction</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.GetInAll</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.GetInLess</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.GetInMore</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.GetInNone</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.IntroduceLet</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.InlineSymbol</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.ResolveMacroAs</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.MoveForm</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.MoveToLet</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.PromoteFn</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.ReplaceReferAllWithRefer</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.ReplaceReferAllWithAlias</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.RestructureKeys</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.ChangeColl</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.SortClauses</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.ThreadFirstAll</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.ThreadLastAll</className></intentionAction>
        <intentionAction language="clojure"><className>com.github.clojure_lsp.intellij.extension.code_action.UnwindAll</className></intentionAction>

        <!-- misc -->
        <spellchecker.bundledDictionaryProvider implementation="com.github.clojure_lsp.intellij.extension.BundledDictionaryProvider"/>
        <lang.commenter language="clojure" implementationClass="com.github.clojure_lsp.intellij.extension.Commenter"/>
        <lang.quoteHandler language="clojure" implementationClass="com.github.clojure_lsp.intellij.extension.QuoteHandler"/>
        <lang.braceMatcher language="clojure" implementationClass="com.github.clojure_lsp.intellij.extension.BraceMatcher"/>
        <applicationService serviceImplementation="com.github.clojure_lsp.intellij.extension.SettingsState"/>
        <applicationConfigurable
            parentId="tools"
            instance="com.github.clojure_lsp.intellij.extension.GeneralSettingsConfigurable"
            id="com.github.clojure_lsp.intellij.extension.GeneralSettingsConfigurable"
            displayName="Clojure LSP"/>
    </extensions>

    <actions>
        <!-- Features -->
        <action id="ClojureLSP.FindDefinition"
                class="com.github.clojure_lsp.intellij.action.DefinitionAction"
                text="Find definition"
                description="Find the defintion of the element at cursor."
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"
                use-shortcut-of="GotoDeclaration">
            <!-- TODO why Control+B doesnt work/override find declaration? -->
            <keyboard-shortcut first-keystroke="shift alt F7" keymap="$default"/>
            <mouse-shortcut keystroke="ctrl shift button1" keymap="$default"/>
        </action>
        <action id="ClojureLSP.FindReferences"
                class="com.github.clojure_lsp.intellij.action.ReferencesAction"
                text="Find references"
                description="Find all references of the element at cursor."
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"
                use-shortcut-of="FindUsages">
        </action>
        <!-- Refactors -->
        <action id="ClojureLSP.DragParamBackward"
                class="com.github.clojure_lsp.intellij.action.DragParamBackwardAction"
                text="Drag param backward"
                description="Drag param backward"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.DragParamForward"
                class="com.github.clojure_lsp.intellij.action.DragParamForwardAction"
                text="Drag param forward"
                description="Drag param forward"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.DragBackward"
                class="com.github.clojure_lsp.intellij.action.DragBackwardAction"
                text="Drag backward"
                description="Drag backward"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.DragForward"
                class="com.github.clojure_lsp.intellij.action.DragForwardAction"
                text="Drag forward"
                description="Drag forward"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.AddMissingImport"
                class="com.github.clojure_lsp.intellij.action.AddMissingImportAction"
                text="Add import to namespace"
                description="Add import to namespace"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.AddMissingLibspec"
                class="com.github.clojure_lsp.intellij.action.AddMissingLibspecAction"
                text="Add missing require"
                description="Add missing require"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.AddRequireSuggestion"
                class="com.github.clojure_lsp.intellij.action.AddRequireSuggestionAction"
                text="Add require suggestion"
                description="Add require suggestion"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.CycleColl"
                class="com.github.clojure_lsp.intellij.action.CycleCollAction"
                text="Cycle collection"
                description="Cycle collections () [] {}"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.CycleKeywordAutoResolve"
                class="com.github.clojure_lsp.intellij.action.CycleKeywordAutoResolveAction"
                text="Cycle keyword auto-resolve"
                description="Cycle keyword auto-resolve"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.CleanNs"
                class="com.github.clojure_lsp.intellij.action.CleanNsAction"
                text="Clean namespace"
                description="Clean current namespace, sorting and removing unused requires and imports"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"
                use-shortcut-of="OptimizeImports"/>
        <action id="ClojureLSP.CyclePrivacy"
                class="com.github.clojure_lsp.intellij.action.CyclePrivacyAction"
                text="Cycle privacy"
                description="Cycle privacy of def/defn"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.CreateTest"
                class="com.github.clojure_lsp.intellij.action.CreateTestAction"
                text="Create test"
                description="Create test"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.DemoteFn"
                class="com.github.clojure_lsp.intellij.action.DemoteFnAction"
                text="Demote fn to #()"
                description="Demote fn to #()"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.DestructureKeys"
                class="com.github.clojure_lsp.intellij.action.DestructureKeysAction"
                text="Destructure keys"
                description="Destructure keys"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.ExtractToDef"
                class="com.github.clojure_lsp.intellij.action.ExtractToDefAction"
                text="Extract to def"
                description="Extract to def"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.ExtractFunction"
                class="com.github.clojure_lsp.intellij.action.ExtractFunctionAction"
                text="Extract function"
                description="Extract function"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.ExpandLet"
                class="com.github.clojure_lsp.intellij.action.ExpandLetAction"
                text="Expand let"
                description="Expand let"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.CreateFunction"
                class="com.github.clojure_lsp.intellij.action.CreateFunctionAction"
                text="Create function"
                description="Create function from example"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.GetInAll"
                class="com.github.clojure_lsp.intellij.action.GetInAllAction"
                text="Move to get/get-in"
                description="Move all expressions to get/get-in"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.GetInLess"
                class="com.github.clojure_lsp.intellij.action.GetInLessAction"
                text="Remove from get/get-in"
                description="Remove one element from get/get-in"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.GetInMore"
                class="com.github.clojure_lsp.intellij.action.GetInMoreAction"
                text="Move all to get/get-in"
                description="Move another expression to get/get-in"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.GetInNone"
                class="com.github.clojure_lsp.intellij.action.GetInNoneAction"
                text="Unwind whole get/get-in"
                description="Unwind whole get/get-in"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.IntroduceLet"
                class="com.github.clojure_lsp.intellij.action.IntroduceLetAction"
                text="Introduce let"
                description="Introduce let"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.InlineSymbol"
                class="com.github.clojure_lsp.intellij.action.InlineSymbolAction"
                text="Inline Symbol"
                description="Inline Symbol"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.ResolveMacroAs"
                class="com.github.clojure_lsp.intellij.action.ResolveMacroAsAction"
                text="Resolve macro as..."
                description="Resolve macro as some existing macro or function"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.MoveForm"
                class="com.github.clojure_lsp.intellij.action.MoveFormAction"
                text="Move form"
                description="Move form to another place"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.MoveToLet"
                class="com.github.clojure_lsp.intellij.action.MoveToLetAction"
                text="Move expression to let"
                description="Move expression to let"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.PromoteFn"
                class="com.github.clojure_lsp.intellij.action.PromoteFnAction"
                text="Promote #() to fn, or fn to defn"
                description="Promote #() to fn, or fn to defn"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.ReplaceReferAllWithRefer"
                class="com.github.clojure_lsp.intellij.action.ReplaceReferAllWithReferAction"
                text="Replace ':refer :all' with ':refer'"
                description="Replace ':refer :all' with ':refer [...]'"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.ReplaceReferAllWithAlias"
                class="com.github.clojure_lsp.intellij.action.ReplaceReferAllWithAliasAction"
                text="Replace ':refer :all' with alias"
                description="Replace ':refer :all' with alias"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.RestructureKeys"
                class="com.github.clojure_lsp.intellij.action.RestructureKeysAction"
                text="Restructure keys"
                description="Restructure keys"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.ChangeColl"
                class="com.github.clojure_lsp.intellij.action.ChangeCollAction"
                text="Switch collection to `{}, (), #{}, []`"
                description="Switch collection to `{}, (), #{}, []`"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.SortClauses"
                class="com.github.clojure_lsp.intellij.action.SortClausesAction"
                text="Sort map/vector/list/set/clauses"
                description="Sort map/vector/list/set/clauses"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.ThreadFirstAll"
                class="com.github.clojure_lsp.intellij.action.ThreadFirstAllAction"
                text="Thread first all"
                description="Thread first all"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.ThreadFirst"
                class="com.github.clojure_lsp.intellij.action.ThreadFirstAction"
                text="Thread first expression"
                description="Thread first expression"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.ThreadLastAll"
                class="com.github.clojure_lsp.intellij.action.ThreadLastAllAction"
                text="Thread last all"
                description="Thread last all"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.ThreadLast"
                class="com.github.clojure_lsp.intellij.action.ThreadLastAction"
                text="Thread last expression"
                description="Thread last expression"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.UnwindAll"
                class="com.github.clojure_lsp.intellij.action.UnwindAllAction"
                text="Unwind whole thread"
                description="Unwind whole thread"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>
        <action id="ClojureLSP.UnwindThread"
                class="com.github.clojure_lsp.intellij.action.UnwindThreadAction"
                text="Unwind thread once"
                description="Unwind thread once"
                icon="com.github.clojure_lsp.intellij.Icons.CLOJURE"/>

        <!-- groups -->
        <group>
            <add-to-group group-id="EditorPopupMenu.GoTo" anchor="first"/>
            <add-to-group group-id="GoToMenu" anchor="before" relative-to-action="GotoDeclaration"/>
            <reference ref="ClojureLSP.FindDefinition"/>
            <reference ref="ClojureLSP.FindReferences"/>
            <separator/>
        </group>

        <group id="ClojureLSP.Refactors" popup="true" text="Clojure refactors" icon="com.github.clojure_lsp.intellij.Icons.CLOJURE">
            <add-to-group group-id="RefactoringMenu" anchor="first"/>
            <reference ref="ClojureLSP.AddMissingImport"/>
            <reference ref="ClojureLSP.AddMissingLibspec"/>
            <reference ref="ClojureLSP.AddRequireSuggestion"/>
            <reference ref="ClojureLSP.ChangeColl"/>
            <reference ref="ClojureLSP.CycleColl"/>
            <reference ref="ClojureLSP.CycleKeywordAutoResolve"/>
            <reference ref="ClojureLSP.CleanNs"/>
            <reference ref="ClojureLSP.CyclePrivacy"/>
            <reference ref="ClojureLSP.CreateFunction"/>
            <reference ref="ClojureLSP.CreateTest"/>
            <reference ref="ClojureLSP.DemoteFn"/>
            <reference ref="ClojureLSP.DragParamBackward"/>
            <reference ref="ClojureLSP.DragParamForward"/>
            <reference ref="ClojureLSP.DragBackward"/>
            <reference ref="ClojureLSP.DragForward"/>
            <reference ref="ClojureLSP.DestructureKeys"/>
            <reference ref="ClojureLSP.ExtractToDef"/>
            <reference ref="ClojureLSP.ExtractFunction"/>
            <reference ref="ClojureLSP.ExpandLet"/>
            <reference ref="ClojureLSP.GetInAll"/>
            <reference ref="ClojureLSP.GetInLess"/>
            <reference ref="ClojureLSP.GetInMore"/>
            <reference ref="ClojureLSP.GetInNone"/>
            <reference ref="ClojureLSP.IntroduceLet"/>
            <reference ref="ClojureLSP.InlineSymbol"/>
            <reference ref="ClojureLSP.MoveForm"/>
            <reference ref="ClojureLSP.MoveToLet"/>
            <reference ref="ClojureLSP.PromoteFn"/>
            <reference ref="ClojureLSP.ReplaceReferAllWithRefer"/>
            <reference ref="ClojureLSP.ReplaceReferAllWithAlias"/>
            <reference ref="ClojureLSP.ResolveMacroAs"/>
            <reference ref="ClojureLSP.RestructureKeys"/>
            <reference ref="ClojureLSP.SortClauses"/>
            <reference ref="ClojureLSP.ThreadFirstAll"/>
            <reference ref="ClojureLSP.ThreadFirst"/>
            <reference ref="ClojureLSP.ThreadLastAll"/>
            <reference ref="ClojureLSP.ThreadLast"/>
            <reference ref="ClojureLSP.UnwindAll"/>
            <reference ref="ClojureLSP.UnwindThread"/>
            <separator/>
        </group>
    </actions>
    <applicationListeners>
        <listener topic="com.intellij.ide.AppLifecycleListener"
                  class="com.github.clojure_lsp.intellij.listener.AppLifecycleListener"/>
    </applicationListeners>

    <projectListeners>
        <listener topic="com.intellij.openapi.fileEditor.FileEditorManagerListener"
                  class="com.github.clojure_lsp.intellij.listener.FileListener"/>
        <!-- TODO listen to vfs events outside editor -->
        <!-- <listener topic="com.intellij.openapi.vfs.newvfs.BulkFileListener" -->
        <!--           class="com.github.clojure_lsp.intellij.listener.FileListener"/> -->

    </projectListeners>
</idea-plugin>
