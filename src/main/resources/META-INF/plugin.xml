<idea-plugin require-restart="true">
    <id>com.github.clojure-lsp</id>
    <name>Clojure LSP</name>
    <vendor url="https://github.com/clojure-lsp/clojure-lsp-intellij">clojure-lsp</vendor>

    <depends>com.intellij.modules.platform</depends>

    <incompatible-with>org.jetbrains.idea.clojure</incompatible-with>
    <incompatible-with>com.cursiveclojure.cursive</incompatible-with>

    <extensions defaultExtensionNs="com.intellij">
        <fileType name="clojure" language="clojure" extensions="clj;cljs;cljc;cljd;edn;bb;clj_kondo"
                  implementationClass="com.github.clojure_lsp.intellij.ClojureFileType" fieldName="INSTANCE"/>

        <!-- syntax parse -->
        <lang.parserDefinition language="clojure" implementationClass="com.github.clojure_lsp.intellij.language.parser.ClojureParserDefinition"/>
        <lang.syntaxHighlighterFactory language="clojure" implementationClass="com.github.clojure_lsp.intellij.extension.SyntaxHighlighter"/>
        <colorSettingsPage implementation="com.github.clojure_lsp.intellij.extension.ColorSettingsPage"/>

        <!-- LSP features -->

        <postStartupActivity implementation="com.github.ericdallo.clj4intellij.extension.NREPLStartup"/>
        <postStartupActivity implementation="com.github.clojure_lsp.intellij.extension.InitDBStartup"/>
        <postStartupActivity implementation="com.github.clojure_lsp.intellij.extension.RegisterActionsStartup"/>
        <statusBarWidgetFactory
            id="ClojureLSPStatusBar"
            displayName="Clojure LSP"
            order="first"
            implementation="com.github.clojure_lsp.intellij.extension.StatusBarFactory" />
        <editorFactoryDocumentListener
            implementation="com.github.clojure_lsp.intellij.listener.FileListener"/>
        <gotoDeclarationHandler language="clojure" implementation="com.github.clojure_lsp.intellij.extension.Definition"/>
        <externalAnnotator language="clojure" implementationClass="com.github.clojure_lsp.intellij.extension.Annotator" />
        <lang.documentationProvider implementationClass="com.github.clojure_lsp.intellij.extension.Documentation"
                               language="clojure" order="first"/>
        <formattingService implementation="com.github.clojure_lsp.intellij.extension.Formatting"/>
        <renameHandler implementation="com.github.clojure_lsp.intellij.extension.RenameHandler"/>
        <codeInsight.inlayProvider
            language="clojure"
            isEnabledByDefault="true"
            implementationClass="com.github.clojure_lsp.intellij.extension.CodeLensProvider"/>
        <completion.contributor language="clojure" implementationClass="com.github.clojure_lsp.intellij.extension.CompletionContributor"/>
        <notificationGroup id="Clojure LSP notifications"
                           displayType="BALLOON"/>
        <fileDocumentManagerListener implementation="com.github.clojure_lsp.intellij.extension.FileDocumentManagerListener"/>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.AddMissingImport</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.AddMissingLibspec</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.AddRequireSuggestion</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.CycleColl</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.CycleKeywordAutoResolve</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.CleanNs</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.CyclePrivacy</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.CreateTest</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.DragParamBackward</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.DragParamForward</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.DragBackward</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.DragForward</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.DemoteFn</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.DestructureKeys</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.ExtractToDef</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.ExtractFunction</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.ExpandLet</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.CreateFunction</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.GetInAll</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.GetInLess</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.GetInMore</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.GetInNone</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.IntroduceLet</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.InlineSymbol</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.ResolveMacroAs</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.MoveForm</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.MoveToLet</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.PromoteFn</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.ReplaceReferAllWithRefer</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.ReplaceReferAllWithAlias</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.RestructureKeys</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.ChangeColl</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.SortClauses</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.ThreadFirstAll</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.ThreadLastAll</className></intentionAction>
        <intentionAction><language>clojure</language><className>com.github.clojure_lsp.intellij.extension.code_action.UnwindAll</className></intentionAction>

        <!-- misc -->
        <moduleBuilder builderClass="com.github.clojure_lsp.intellij.extension.ClojureModuleBuilder"/>
        <spellchecker.bundledDictionaryProvider implementation="com.github.clojure_lsp.intellij.extension.BundledDictionaryProvider"/>
        <lang.commenter language="clojure" implementationClass="com.github.clojure_lsp.intellij.extension.Commenter"/>
        <lang.quoteHandler language="clojure" implementationClass="com.github.clojure_lsp.intellij.extension.QuoteHandler"/>
        <lang.braceMatcher language="clojure" implementationClass="com.github.clojure_lsp.intellij.extension.BraceMatcher"/>
        <applicationService serviceImplementation="com.github.clojure_lsp.intellij.extension.SettingsState"/>
        <applicationConfigurable
            parentId="tools"
            instance="com.github.clojure_lsp.intellij.extension.GeneralSettingsConfigurable"
            id="com.github.clojure_lsp.intellij.extension.GeneralSettingsConfigurable"
            displayName="Clojure LSP"/>
        <lineIndentProvider implementation="com.github.clojure_lsp.intellij.extension.LineIndentProvider"/>
    </extensions>

    <applicationListeners>
        <listener topic="com.intellij.ide.AppLifecycleListener"
                  class="com.github.ericdallo.clj4intellij.listener.ClojureClassLoaderListener"/>
    </applicationListeners>

    <projectListeners>
        <listener topic="com.intellij.openapi.fileEditor.FileEditorManagerListener"
                  class="com.github.clojure_lsp.intellij.listener.FileListener"/>
        <listener topic="com.intellij.openapi.project.ProjectManagerListener"
                  class="com.github.clojure_lsp.intellij.listener.ProjectManagerListener"/>
        <!-- TODO listen to vfs events outside editor -->
        <!-- <listener topic="com.intellij.openapi.vfs.newvfs.BulkFileListener" -->
        <!--           class="com.github.clojure_lsp.intellij.listener.FileListener"/> -->

    </projectListeners>
</idea-plugin>
